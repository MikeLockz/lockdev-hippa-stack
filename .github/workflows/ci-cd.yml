name: HIPAA App CI/CD

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'lockdev-hippa-app/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'lockdev-hippa-app/**'
      - '.github/workflows/ci-cd.yml'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: hipaa-app
  ECS_SERVICE: hipaa-app-service
  ECS_CLUSTER: hipaa-ecs-cluster
  ECS_TASK_DEFINITION: hipaa-app-task

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: lockdev-hippa-app/.venv
        key: venv-${{ runner.os }}-${{ hashFiles('lockdev-hippa-app/poetry.lock') }}
        restore-keys: |
          venv-${{ runner.os }}-

    - name: Install dependencies
      working-directory: lockdev-hippa-app
      run: |
        if [ "${{ steps.cached-poetry-dependencies.outputs.cache-hit }}" != "true" ]; then
          poetry install --no-interaction --only=main,dev
        else
          echo "Using cached dependencies"
        fi

    - name: Run security checks
      working-directory: lockdev-hippa-app
      run: |
        poetry run bandit -r src/
        poetry run safety check

    - name: Run linting
      working-directory: lockdev-hippa-app
      run: |
        poetry run black --check src/
        poetry run flake8 src/
        poetry run mypy src/

    - name: Run tests
      working-directory: lockdev-hippa-app
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        JWT_SECRET: test-secret
        ENVIRONMENT: testing
      run: |
        poetry run pytest tests/ -v --cov=src --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./lockdev-hippa-app/coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './lockdev-hippa-app'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PULUMI_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PULUMI_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      working-directory: lockdev-hippa-app
      run: |
        IMAGE_TAG=${GITHUB_SHA::7}
        
        # Build with cache and multi-platform support
        docker buildx build \
          --platform linux/amd64 \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --push \
          .
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS service
      run: |
        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment

    - name: Wait for service stability
      run: |
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE

    - name: Verify deployment
      run: |
        # Get the service details
        SERVICE_INFO=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query 'services[0]')
        RUNNING_COUNT=$(echo $SERVICE_INFO | jq -r '.runningCount')
        DESIRED_COUNT=$(echo $SERVICE_INFO | jq -r '.desiredCount')
        
        if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ]; then
          echo "Deployment successful! Running count: $RUNNING_COUNT, Desired count: $DESIRED_COUNT"
        else
          echo "Deployment failed! Running count: $RUNNING_COUNT, Desired count: $DESIRED_COUNT"
          exit 1
        fi